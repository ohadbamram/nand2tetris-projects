// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Determine if A or C instruction
    Not(in=instruction[15] , out=Ains );
    Not(in=Ains , out=Cins );
    // First Mux
    And(a=Cins , b=instruction[5] , out=selMux );
    Mux16(a=instruction , b=outALU , sel=selMux , out=inA );
    // Determine A selector
    Or(a=selMux , b=Ains , out=selA );
    // Register A, out also goes to addressM
    Register(in=inA , load=selA , out=outA , out[0..14]=addressM );
    // Second Mux
    Mux16(a=outA , b=inM , sel=instruction[12] , out=AorM );
    // Register D, determine will the alu out go to D
    And(a=Cins , b=instruction[4] , out=loadD );
    DRegister(in=outALU , load=loadD , out=outD );
    // ALU
    ALU(x=outD , y=AorM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outALU , out=outM , zr=zr , ng=ng );
    // Calculating JMP
    Or(a=ng , b=zr , out=zrOrng );
    Not(in=zrOrng , out=positive );
    // if positive and ins[0], jump gt
    And(a=instruction[0] , b=positive , out=jgt );
    // if zero and ins[1], jump eq
    And(a=instruction[1] , b=zr , out=jeq );
    // if negative and ins[2], jump lt
    And(a=instruction[2] , b=ng , out=jlt );
    // check if jump conditions apply
    Or(a=jeq , b=jlt , out=jle );
    Or(a=jle , b=jgt , out=jump );
    Not(in=loadPC , out=incPC );
    And(a=jump , b=instruction[15] , out=loadPC );
    // PC
    PC(in=outA , load=loadPC , inc=incPC , reset=reset , out[0..14]=pc );
    // writeM
    And(a=instruction[3] , b=Cins , out=writeM );
    

}